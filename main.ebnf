DIGIT = "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9";
INT = {DIGIT};
SIGN = "+"|"-";
SIGNEDINT = [SIGN], {DIGIT};
NUMBER = {DIGIT}, [".", {DIGIT}];
SIGNEDNUMBER = [SIGN], {DIGIT}, [".", {DIGIT}];
LETTER = "A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"|"a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z";
WS = [" "];

CROSSLINK = "//";
CHIMERIC = "+";

main = {proteoform, (CROSSLINK | CHIMERIC)}, proteoform;
proteoform = peptide, ["/", charge];

peptide = {modGlobal}, {modUnknownPos}, {modLabile}, [modNTerm], {aa | modRange}, [modCTerm];

aa = AA, {mod | (ModL, modLabel, ModR)};
AA = LETTER;

modGlobal = ModGlobalL, (ISOTOPE | (mod, "@", {AA, ","}, AA)), ModGlobalR;
ISOTOPE = [INT], {LETTER}, [SIGNEDINT];

modUnknownPos = {mod, ["^", MODCOUNT]}, '?' ;

mod =       ModL,        {modInternal, [modLabel], "|"}, modInternal, [modLabel], ModR;
modLabile = ModLabileL,  {modInternal,             "|"}, modInternal,             ModLabileR;
MODCOUNT = INT;
modInternal = (modName | modAccession | modMass | modFormula | modGlycan | info);

modNTerm = (mod | (ModL, modLabel, ModR)), "-";
modCTerm = "-", (mod | (ModL, modLabel, ModR));

modRange = ModRangeL, modRangePos, ModRangeR, {mod};
modRangePos = {aa | modRange};

modName = ((CVAbbrev, ":") | [CVAbbrevOpt, ":"]), TEXT;

CVAbbrevOpt = "U"| "M" ;
CVAbbrev = "R" | "X" | "G";

modAccession = CVName, ":", TEXT;
CVName = "UNIMOD" | "MOD" | "RESID" | "XLMOD" | "GNO";

modMass = [(CVAbbrevOpt | CVAbbrev | "Obs"), ":"], SIGNEDNUMBER;

modFormula = "Formula:", FORMULA;
FORMULA = {(ModL, SIGNEDINT, {LETTER}, [SIGNEDINT], ModR) | ({LETTER}, WS, [SIGNEDINT], WS)};

modGlycan = "Glycan", {monosaccharide, WS};
monosaccharide = MONOSACCHARIDE, [INT];

info = "Info:", TEXT;

modLabel = "#", (ModLabelXL | ModLabelBranch | ModLabel), ["(", ModScore, ")"];
ModLabelXL = "XL", ModLabel;
ModLabelBranch = "BRANCH";
ModLabel = {LETTER | DIGIT};
ModScore = SIGNEDNUMBER;

charge = CHARGE, [ModL, ion, ModR];
CHARGE = SIGNEDINT;
ion = [TEXT, ","], TEXT;

TEXT = {LETTER|" "|DIGIT};

ModL = "[";
ModR = "]";
ModLabileL = "{";
ModLabileR = "}";
ModGlobalL = "<";
ModGlobalR = ">";
ModRangeL = "(";
ModRangeR = ")";

MONOSACCHARIDE = "uxxxxxxxxh"
	| "uxxxxxxh"
	| "uxxxxxh"
	| "uxxxxh_?*OSO/3=O/3=O"
	| "uxxxxh_?*OPO/3O/3=O"
	| "uxxxxh_?*NSO/3=O/3=O"
	| "uxxxxh_?*NCC/3=O_?*OSO/3=O/3=O"
	| "uxxxxh_?*NCC/3=O"
	| "uxxxxh_?*N"
	| "uxxxxh"
	| "uxxxh"
	| "uxxxdh"
	| "uxxh"
	| "uxh43344h"
	| "uxh"
	| "uh"
	| "u1221m"
	| "sulfate"
	| "phosphate"
	| "enHexA"
	| "en,aHex"
	| "en,a-Hex"
	| "dHex"
	| "d-Hex"
	| "aHex"
	| "a-Hex"
	| "Tri"
	| "Tet"
	| "Sug"
	| "Sialic Acid"
	| "S"
	| "RES\n1b:x-xgro-NON-x:x\nLIN\n"
	| "RES\n1b:x-xgro-HEP-x:x\nLIN\n"
	| "RES\n1b:x-lgal-HEX-x:x|6:d\nLIN\n"
	| "RES\n1b:x-dgro-dgal-NON-x:x|1:a|2:keto|3:d\n2s:n-glycolyl\nLIN\n1:1d(5+1)2n\n"
	| "RES\n1b:x-dgro-dgal-NON-x:x|1:a|2:keto|3:d\n2s:n-acetyl\nLIN\n1:1d(5+1)2n\n"
	| "RES\n1b:x-dgro-dgal-NON-x:x|1:a|2:keto|3:d\n2s:amino\nLIN\n1:1d(5+1)2n\n"
	| "RES\n1b:x-TRI-x:x\nLIN\n"
	| "RES\n1b:x-TET-x:x\nLIN\n"
	| "RES\n1b:x-SUG-x:x\nLIN\n"
	| "RES\n1b:x-PEN-x:x\nLIN\n"
	| "RES\n1b:x-OCT-x:x\nLIN\n"
	| "RES\n1b:x-HEX-x:x|-1:en|-1:a\nLIN\n"
	| "RES\n1b:x-HEX-x:x|-1:d\nLIN\n"
	| "RES\n1b:x-HEX-x:x|-1:a\nLIN\n"
	| "RES\n1b:x-HEX-x:x\nLIN\n"
	| "RES\n1b:x-HEX-x:x\n2s:sulfate\nLIN\n1:1o(-1+1)2n\n"
	| "RES\n1b:x-HEX-x:x\n2s:phosphate\nLIN\n1:1o(-1+1)2n\n"
	| "RES\n1b:x-HEX-x:x\n2s:n-sulfate\nLIN\n1:1d(-1+1)2n\n"
	| "RES\n1b:x-HEX-x:x\n2s:n-acetyl\nLIN\n1:1d(-1+1)2n\n"
	| "RES\n1b:x-HEX-x:x\n2s:n-acetyl\n3s:sulfate\nLIN\n1:1d(-1+1)2n\n2:1o(-1+1)3n\n"
	| "RES\n1b:x-HEX-x:x\n2s:amino\nLIN\n1:1d(-1+1)2n\n"
	| "RES\n1b:x-DEC-x:x\nLIN\n"
	| "Pen"
	| "P"
	| "Oct"
	| "Non"
	| "Neuraminic acid"
	| "NeuGc"
	| "NeuAc"
	| "Neu5Gc"
	| "Neu5Ac"
	| "Neu"
	| "HexS"
	| "HexP"
	| "HexNS"
	| "HexNAc(S)"
	| "HexNAc"
	| "HexN"
	| "HexA"
	| "Hex"
	| "Hep"
	| "Fucose"
	| "Fuc"
	| "Dec"
	| "Aud21122h_5*NCCO/3=O"
	| "Aud21122h_5*NCC/3=O"
	| "Aud21122h_5*N"
	| "?-L-Fucx"
	| "?-D-Neux5NGc"
	| "?-D-Neux5NAc"
	| "?-D-Neux"
	| "?-?-en,a-Hexx"
	| "?-?-d-Hexx"
	| "?-?-a-Hexx"
	| "?-?-Trix"
	| "?-?-Tetx"
	| "?-?-Sugx"
	| "?-?-Penx"
	| "?-?-Octx"
	| "?-?-Nonx"
	| "?-?-HexxS"
	| "?-?-HexxP"
	| "?-?-HexxNS"
	| "?-?-HexxNAc(S)"
	| "?-?-HexxNAc"
	| "?-?-HexxN"
	| "?-?-Hexx"
	| "?-?-Hepx"
	| "?-?-Decx";